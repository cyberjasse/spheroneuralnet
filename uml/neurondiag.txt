@startuml
interface Neuron {
	+ double compute(double[] input)
	+ void backpropagation(double[] errorContribution, double[] lastInput, double gradientStep, double[] thisContribution)
}
class MLPneuron {
	- Function f
	- double[] weights
}
class RBFneuron {
	- double[] prototype
	- double[] variances
}
class RBFexitNeuron {
	- double[] weights
}
interface Function {
	+ double f(double x)
	+ double df(double x)
}
abstract class Layer {
	# double[] lastInput
	# double gradientStep
	+ Neuron[] neurons
	+ void compute(double[] input, double[] output)
	+ void errorContribution(double[] nexLayerContributions, double[] thisContribution)
}
class Net {
	# Layer[] layers
	# double[] lastOutput
	# unsigned numberOfLayers
	+ void compute(double[] input, double[] output)
	+ void backpropagation(double[] expected, double[] thisContribution)
}
class Sigmoid
class Identity

MLPneuron o-- "1" Function
Neuron <|-- MLPneuron
Neuron <|-- RBFneuron
Neuron <|-- RBFexitNeuron
Layer *-- "1-*" Neuron
Net *-- "1-*" Layer
Net <|-- class RBFnet
Function <|-- Sigmoid
Function <|-- Identity
@enduml
